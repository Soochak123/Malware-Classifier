# test_model.py
import numpy as np
from tensorflow.keras.models import load_model
from sklearn.metrics import accuracy_score

# Define mean and standard deviation values for preprocessing
mean_value = ...  # Replace with the actual mean value
std_dev_value = ...  # Replace with the actual standard deviation value

def load_trained_model(model_path='malware_classifier_model.h5'):
    """
    Load the trained neural network model.
    
    Parameters:
    - model_path (str): Path to the saved model file.

    Returns:
    - tf.keras.Model: The loaded model.
    """
    try:
        model = load_model(model_path)
        return model
    except Exception as e:
        print(f"Error loading the model: {str(e)}")
        return None

def preprocess_input_data(input_data):
    """
    Preprocess input data before making predictions.
    
    Parameters:
    - input_data (np.ndarray): Input data in the format expected by the model.

    Returns:
    - np.ndarray: Preprocessed input data.
    """
    # Add any necessary preprocessing steps based on the training data
    # Example: Standardization
    input_data = (input_data - mean_value) / std_dev_value

    return input_data

def make_predictions(model, input_data):
    """
    Use the loaded model to make predictions on input data.
    
    Parameters:
    - model (tf.keras.Model): The loaded model.
    - input_data (np.ndarray): Preprocessed input data.

    Returns:
    - np.ndarray: Model predictions.
    """
    try:
        predictions = model.predict(input_data)
        return predictions
    except Exception as e:
        print(f"Error making predictions: {str(e)}")
        return None

def evaluate_accuracy(true_labels, predicted_labels):
    """
    Evaluate the accuracy of the model predictions.
    
    Parameters:
    - true_labels (np.ndarray): True labels of the data.
    - predicted_labels (np.ndarray): Predicted labels from the model.

    Returns:
    - float: Accuracy of the model.
    """
    accuracy = accuracy_score(true_labels, np.argmax(predicted_labels, axis=1))
    return accuracy

if __name__ == "__main__":
    # Load the trained model
    model = load_trained_model()

    if model is not None:
        # Example: Prepare input data for testing
        new_data = np.array([[...]])  # Replace with your new data
        true_labels = np.array([0])    # Replace with the true labels of the new data

        # Preprocess input data
        preprocessed_data = preprocess_input_data(new_data)

        # Make predictions
        predictions = make_predictions(model, preprocessed_data)

        if predictions is not None:
            # Evaluate accuracy
            accuracy = evaluate_accuracy(true_labels, predictions)
            print(f"Model Accuracy: {accuracy * 100:.2f}%")
